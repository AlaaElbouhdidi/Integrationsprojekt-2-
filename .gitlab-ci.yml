workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never

stages:
  - build
  - test
  - package
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - server/node_modules/

build-frontend:
  stage: build
  image: node:14-alpine
  script:
    - echo "Building Angular"
    - npm ci
    - npm run build

build-backend:
  stage: build
  script:
    - echo "Building Nest"
    - cd server || exit
    - npm ci
    - npm run build

format-frontend:
  stage: test
  needs: ["build-frontend"]
  script:
    - echo "Formatting Angular"
    - npm run format

format-backend:
  stage: test
  needs: ["build-backend"]
  script:
    - echo "Formatting Nest"
    - cd server || exit
    - npm run format

lint-frontend:
  stage: test
  needs: ["format-frontend"]
  script:
    - echo "Linting Angular"
    - npm run lint

lint-backend:
  stage: test
  needs: ["format-backend"]
  script:
    - echo "Linting Nest"
    - cd server || exit
    - npm run lint

doc-frontend:
  stage: test
  needs: ["lint-frontend"]
  script:
    - echo "Documenting Angular"
    - npm run doc

doc-backend:
  stage: test
  needs: ["lint-backend"]
  script:
    - echo "Documenting Nest"
    - cd server || exit
    - npm run doc

test-frontend:
  stage: test
  needs: ["doc-frontend"]
  script:
    - echo "Testing Angular"
    - npm run test

test-backend:
  stage: test
  needs: ["doc-backend"]
  script:
    - echo "Testing Nest"
    - cd server || exit
    - npm run test

e2e-frontend:
  stage: test
  needs: ["test-frontend"]
  script:
    - echo "End-to-End-Testing Angular"
    - npm run test:cy:run

e2e-backend:
  stage: test
  needs: ["test-backend"]
  script:
    - echo "End-to-End-Testing Nest"
    - cd server || exit
    - npm run test:e2e

docker-frontend:
  stage: package
  needs: ["e2e-frontend"]
  script:
    - echo "Dockerizing Angular"
    - scripts/push_frontend_container.sh
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

docker-backend:
  stage: package
  needs: ["e2e-backend"]
  script:
    - echo "Dockerizing Nest"
    - scripts/push_backend_container.sh
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

deploy-frontend:
  stage: deploy
  needs: ["docker-frontend"]
  script:
    - echo "Deploying Angular"
    - firebase deploy --token "$FIREBASE_TOKEN"
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

deploy-backend:
  stage: deploy
  needs: ["docker-backend"]
  script:
    - echo "Deploying Nest"
    - cd server || exit
    - firebase deploy --only functions --token "$FIREBASE_TOKEN"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
